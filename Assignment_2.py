# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EouH6WTKDYuHv4_weGDfKzi-8_GFhOtM

Name : Sohaib Ahmed Amini
u-number: u-36921
Enrollment Nr: 29449
"""

import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import sklearn.metrics
from sklearn.cluster import KMeans

import io

"""**Assignment_2 Part 1(a)**"""

from google.colab import files #here we are uploading the csv file that we need for the tas


uploaded = files.upload()

df_cluster = pd.read_csv('cluster_table.csv') #reading the csv file

df_cluster.head(10) # output of cluster table with head = 10

from sklearn.cluster import KMeans #imported the necessary library

km = KMeans(n_clusters=4) #here we will assigne n_cluster = 4 according to the task description

y_predicted = km.fit_predict(df_cluster[['X','Y','Z']]) #prediction of the values based on the variables
y_predicted

df_cluster['Cluster_Number'] = y_predicted #output of cluster table with the column of predicted cluster number alongside true cluster label
df_cluster

df_cluster1 = df_cluster[df_cluster.Cluster_Number == 0] #defining each seperate cluster according to the predicted cluster number
df_cluster2 = df_cluster[df_cluster.Cluster_Number == 1]
df_cluster3 = df_cluster[df_cluster.Cluster_Number == 2]
df_cluster4 = df_cluster[df_cluster.Cluster_Number == 3]

from re import X
plt.scatter(df_cluster1.X, df_cluster1.Y, df_cluster1.Z, color= 'green') #plotting each cluster with customized requirements
plt.scatter(df_cluster2.X, df_cluster2.Y, df_cluster2.Z, color= 'brown')
plt.scatter(df_cluster3.X, df_cluster3.Y, df_cluster3.Z, color= 'blue')
plt.scatter(df_cluster4.X, df_cluster4.Y, df_cluster4.Z, color= 'black')

plt.xlabel('X')
plt.ylabel('Y')

plt.legend()

"""**Assignment_2 1(a)**"""

from sklearn.metrics import confusion_matrix #importing the necessary functions

df_cm = confusion_matrix(df_cluster['Cluster label'], y_predicted) #here we compare our result using confusion metrix
df_cm

"""**Assignment_2 Part 2(a)**"""

from google.colab import files #regression table is imported


uploaded = files.upload()

df_reg_table= pd.read_csv('regression_table.csv') #regression table output with heads = 10
df_reg_table.head(10)

from sklearn import linear_model #importing the linear_model function from scikit-learn library

df_reg_table['X'].ndim #finding the dimension of regression table

df_reg_table['X'].shape

X = df_reg_table['X'] #assigning variable to column X and column Y
Y = df_reg_table['Y']
X

X = X.values.reshape(-1, 1) # reshaped X and Y from scaler array to 2D array 
Y = Y.values.reshape(-1, 1)
X.shape
Y.shape

from sklearn.linear_model import LinearRegression #imported linear Regression function from Scikit

lr = LinearRegression() #one method for performing linear regression of variable 'X' over variable 'Y'
lr.fit(X,Y)

reg = linear_model.LinearRegression() #another method for performing linear regression of variable 'X' over variable 'Y'
reg.fit(X,Y)

pred_value = reg.predict([[51]]) #testing our linear regression model by predicting the result for the single value of Y over X
 pred_value

OR_pred_value = lr.predict([[51]]) #another method with same result
OR_pred_value

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline #setting backend of matplotlib to the inline backend
                   #ploting the scatter plot with customized requirements with the linear regression line of the model
                   #while ploting the line the output is possible with both funtion which are 'reg.predict' or 'lr.pred'
                   
plt.xlabel('X', fontsize=25 ) 
plt.ylabel('Y', fontsize=25 )
plt.scatter(df_reg_table['X'], df_reg_table['Y'], color = 'red', marker = '+')
plt.plot(X,reg.predict(X), color='black')

"""**Assignment_2 Part 2(b)**"""

reg.coef_  #output for reg coeficent for the regression model

from sklearn.metrics import mean_squared_error #imported mean_squared_error from scikit

y_pred = reg.predict(X) #assigning y_predict based on data of 'X'

mean_squared_error(Y, y_pred) #mean**2_error for Y over y_pred

sum_of_sq = (Y-y_pred)**2   #another method for finding mean**2_error for Y over y_pred 
mean_sq_err=(np.mean(sum_of_sq))
mean_sq_err

from sklearn.metrics import r2_score

r_squared = r2_score(Y, y_pred) #output for Coefficient of determination
r_squared